#!/usr/bin/env perl
# Emacs: -*- mode: cperl; -*-
# For license: see LICENSE file at top-level

use strict;
use warnings;
use diagnostics;

use IPC::Open3 qw(open3);
use Symbol qw(gensym);

use File::Basename qw(basename);
my $progname = basename($0);

#
# -- encapsulate debugging output ----------------------------------------
#

my $debug = 0;                  # default

my $debug_env = 'OSHRUN_DEBUG';

if (defined $ENV{$debug_env}) {
  my $d = lc $ENV{$debug_env};
  $debug = ($d =~ /^[y1]/);
}

my $do_effect;

eval 'use Term::ANSIColor';
if ($@) {
  $do_effect = 0;
}
else {
  # only use effects on terminals
  $do_effect = ( -t STDERR );
}

sub debug {
  if ($debug) {
    my $msg = "$progname: @_\n";
    print STDERR $do_effect ? colored($msg, 'bold') : $msg;
  }
}

#
# -- work out which launcher is required ---------------------------------
#

my $launcher = '';

#
# Anything in environment?
#
if (defined $ENV{SHMEM_LAUNCHER}) {
  $launcher = $ENV{SHMEM_LAUNCHER};
}

#
# Configure might have given us a SHMEM_LAUNCHER (otherwise this is a
# strange-looking no-op)
#
if ($launcher eq '') {
  $launcher = '@SHMEM_LAUNCHER@';
}

#
# still nothing, can we find something?
#

eval 'use Memoize';
if(! $@) {
  memoize('which');
}

sub which {
  my $f = shift;
  my @ps = split ':', $ENV{PATH};

  for my $p (@ps) {
    my $try = "$p/$f";
    if ( -x $try ) {
      return $try;
    }
  }
  return undef;
}

#
# Nothing provided, so look for suitable launcher.  Prefer prun from
# PRRTE.
#

if ($launcher eq '') {
  my @Launchers = qw(prun mpiexec mpirun);

  for my $L (@Launchers) {
    debug("try launcher \"$L\"");

    my $pl = which($L);
    next unless defined $pl;

    debug("potential launcher in \"$pl\"");

    if ($L eq 'prun') {
      my $pr = $pl;
      $pr =~ s%/prun$%/prte%;
      if ( -x $pr ) {
        debug("found PRRTE starter in \"$pr\"");
      }
      else {
        debug("prun but no prte, skipping");
        next;
      }
    }

    # take this one
    debug("using launcher in \"$pl\"");
    $launcher = $L;
    last;
  }
}

if ($launcher eq '') {
  die "$progname: unable to find launcher";
}

debug("launcher is \"$launcher\"");

#
# -- do the underlying launch of app -------------------------------------
#

sub bare_launch {
  debug("launch: \"$launcher @ARGV\"");
  return system $launcher, @ARGV;
}

#
# -- for PRRTE -----------------------------------------------------------
#

# stubbing to prep for more complicated prte invocations:
# my @prte_cmd
#   = qw(
#         prte
#         -pmca pmix pmix3x
#         -pmca grpcomm bmg
#         -pmca odls_base_verbose 10
#         -pmca errmgr_base_verbose 10
#         -pmca propagate_base_verbose 10
#         -debug-daemons
#      );

my @prte_cmd
  = qw(
        prte
     );

my ($chin, $chout, $cherr);     # child stdio
my $prte_pid;

#
# For controlling launched starter
#

sub prrte_shutdown {
  #
  # shut down starter
  #
  kill TERM => $prte_pid;
  my $killed = waitpid($prte_pid,0);

  if ($killed == $prte_pid) {
    debug("PRRTE:$prte_pid: shut down");
  }
  else {
    die "$progname:$prte_pid: couldn't kill PRRTE starter: $!";
  }
}

sub prrte_launch {
  #
  # starter is in child process
  #
  debug("PRRTE: starting up");

  $cherr = gensym();            # need lvalue

  $prte_pid = open3($chin, $chout, $cherr, @prte_cmd);

  if (! defined $prte_pid) {
    die "$progname: failed to run PRRTE starter: $!";
  }

  my $response = 'DVM ready';

  #
  # parent waits for starter to be ready, then launches user app
  #
  if ($prte_pid) {
    my $ready = 0;

    while (<$chout>) {
      if (/^$response/) {
        $ready = 1;
        last;
      }
    }

    if (! $ready) {
      prrte_shutdown();

      die "$progname: internal error at line " .
        __LINE__ .
        ", should not be here";
    }

    debug("PRRTE:$prte_pid: $response");

    # if good to go, return status of launch; otherwise error
    return $ready ? bare_launch() : 1;
  }
}

#
# -- let's do it! --------------------------------------------------------
#

my $err;

#
# If we're using PRRTE, fire up support; otherwise just launch
#

my $is_prun = basename($launcher) eq 'prun';

if ($is_prun) {
  $err = prrte_launch();

  prrte_shutdown();
}
else {
  $err = bare_launch();
}

exit $err;
