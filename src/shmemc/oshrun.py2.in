#!/usr/bin/env python
# For license: see LICENSE file at top-level

import os
import sys
from subprocess import Popen, PIPE
import re
import shlex
from threading import Timer
from distutils.spawn import find_executable

#
# -- defaults --------------------------------------------------------
#

DVM            = "prte"
EXPECTED       = b"DVM ready"

SPAWN_TIMEOUT  = 3

PRTE_LAUNCHER  = "prun -x SHMEM_* -x SMA_*"
MPI_LAUNCHER   = "mpiexec"

ENV_LAUNCH_VAR = "SHMEM_LAUNCHER"

width          = 70             # of terminal
debugging      = False
launcher       = None
using_dvm      = False
lproc          = None           # launcher process

#
# -- debug and error--------------------------------------------------
#
def debug(cat, *args):
    if debugging:
        msg = progname + ":"
        if cat != None:
            msg += cat + ":"
        msg += ' '.join(map(str, args))
        print msg

#
# crash out on error
#
def bail(*args):
    err = "ERROR:" + ' '.join(map(str, args)) + "\n"
    sys.stderr.write(err)
    sys.exit(1)

#
# -- main ------------------------------------------------------------
#

#
# set up
#
progname = os.path.basename(sys.argv[0])

#
# produce commentary during start up?
#
de = os.getenv("OSHRUN_DEBUG")
if de != None:
    if not re.match('^[n0]', de, re.IGNORECASE):
        debugging = True

debug("init", "looking for launcher")

launcher = os.getenv(ENV_LAUNCH_VAR)

if launcher != None:
    if not find_executable(launcher):
        bail("can't find launcher \"{0}\" in ".format(launcher) + \
             "environment variable \"{0}\"".format(ENV_LAUNCH_VAR))
else:
    launcher = "@SHMEM_LAUNCHER@" # override from configure?


if launcher == "":
    #
    # start the DVM if required
    #
    using_dvm = find_executable(DVM) != None
    if using_dvm:
        debug(DVM, "start DVM")
        lproc = Popen(shlex.split(DVM), stdout = PIPE, stderr = PIPE)
        t = Timer(SPAWN_TIMEOUT, lproc.terminate)
        try:
            t.start()
            line = lproc.stdout.readline().rstrip()
        finally:
            t.cancel()
        if line != EXPECTED:
            bail("unable to get greeting " + \
                 "\"{0}\" from DVM \"{1}\"".format(EXPECTED, DVM))
        debug(DVM, "DVM says \"{0}\"".format(line))
        launcher = PRTE_LAUNCHER
        debug(DVM, "talking with DVM \"{0}\"".format(DVM))
    else:
        debug("init", "checking for MPI")
        if find_executable(MPI_LAUNCHER):
            launcher = MPI_LAUNCHER
        else:
            bail("can't find a launcher")

#
# pull in what user wants to run
#
user_cmd = ' '.join(map(str, sys.argv[1:]))

#
# full command to run
#
cmd = launcher + ' ' + user_cmd

debug(DVM, "running \"{0}\"".format(cmd))
debug(None, '-' * width)

#
# run until we hit shutdown
#
os.system(cmd)

if using_dvm:
    debug(DVM, "killing DVM pid {0}".format(lproc.pid))
    lproc.terminate()
